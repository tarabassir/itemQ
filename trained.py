#!/usr/bin/python3
import numpy as np
import math
from numpy.linalg import inv
import k_means_centers
import random

class RBFN:
#------------------------------------------------------------------------------
    # Constructor
    def __init__(self,center_num,neighboring_center_num):
        self.__train_inputs=[]
        self.__train_outputs = []
        self.output=[]
        self.__weights_hidden_to_output=[[1.5280533406960686], [9326.27663583825], [2221.9010641975656], [3043.0695046494693], [-16355.207880290269], [3222.5693016344885], [-1258.0392602439315], [-2603.902244523677], [20521.152620803037], [-64974.45499619513], [-42.047371266375194], [1426.3691555762389], [38908.51570501755], [-94909.6198670708], [2537.4451481507167], [-45658.95776194632], [6033.527238315471], [2911.4088571151033], [2051.6219895198624], [-47120.859225698274], [47242.1374597314], [-456.1314459637667], [-21818.61778909669], [16202.040701234695], [13743.901299872578], [-6514.8824915910445], [3906.301256348029], [34678.466712981826], [-5725.101586547389], [8819.212852006069], [21302.317948304826], [2556.3527792158334], [39104.66342463096], [-24335.269023801608], [-50.481411009925296], [-5006.338511389644], [-10940.953996542814], [232.0207924192935], [-2440.283402419025], [672.967946958581], [-23742.60600004993], [-41078.17692694321], [-16368.364559133288], [10690.674061955404], [38360.958910392335], [-1154.0131171363983], [-12100.007180759772], [24576.898900764834], [17013.290672334064], [3741.5886478698285], [24683.904183954488], [-519.3327724796727], [-32013.14314327595], [125.44691963355638], [-1180.7294467636038], [-56446.0976710222], [6252.009097382931], [-11255.389244162101], [45399.4524955284], [3018.8364723286177], [-907.6976100848988], [-54742.62880726749], [-35364.01646076492], [-23585.786009054835], [30402.47412094158], [-6886.574540085952], [736.5796412869386], [-1871.2313924172158], [691.9057266557757], [-14174.374356808166], [10364.98977139356], [29940.16912660848], [10171.598197810828], [-2177.2200782432155], [15166.534926368437], [-27553.691818773477], [585.234112179266], [-19121.804455589387], [-16417.970970379443], [2599.7697364578726], [7227.718068376473], [801.1146139980792], [12357.663345696412], [-44092.44803854151], [-8612.953726767642], [190.66223875661944], [-7507.593582642417], [-72.11106911536307], [-73246.25782672007], [52012.66755213037], [-2516.8029710704864], [-14723.518251729838], [30241.892207793608], [36699.04795058856], [-12356.457146546614], [90918.34095812969], [112200.6569841083], [16388.902165499967], [-27938.521827201497], [18865.068073978407], [-5978.671130238093], [26093.949512431853], [4020.4281422705562], [-15527.331538669467], [2859.640130804086], [-1514.3793866936667], [8227.459228508284], [-74204.40291565252], [-32665.8018358782], [-1361.1514296989335], [9733.19421811647], [-11231.442812510744], [1059.2032617131572], [3494.597631641458], [4418.554056052526], [31759.874964070783], [25624.375941316335], [-51397.77500342847], [67198.58595516982], [1310.8325937595273], [54946.01781375907], [6149.5539959188245], [-60129.0226339638], [27674.715628934107], [-5609.273517473035], [7254.469772746654], [26229.272200019375], [21791.369971960827], [29525.81727589867], [37727.288444012454], [-21282.027312113052], [-6494.617644446884], [-8411.370461512764], [6816.049845493613], [6227.1965139746535], [-1878.5669405279805], [-2609.350799798566], [22715.689510852048], [-471.5825587608547], [7746.12663107183], [-15711.279589312497], [-7116.994595692186], [-5188.017102536054], [7031.317758031204], [-8245.479906696717], [10179.717770129311], [-19898.589610536197], [6482.947205262153], [321.86327072737095], [-13853.726451954735], [2232.833138632232], [8098.08570678039], [42023.98289847997], [5001.471958123575], [-30172.226903177027], [-1396.7656967401294], [-3427.2752949724636], [18581.68362835097], [-19251.397682518822], [9585.208514848637], [103.57023757459683], [5179.852644738714], [48074.955100364874], [-13514.795986764162], [17901.538793365165], [18161.10126290075], [-90606.04059821417], [16074.595084639106], [-19822.20456933754], [2884.8700921537747], [20000.287726774455], [-5745.215403438144], [27156.156913349885], [-24673.519463077315], [-14413.4266485189], [-4373.99034289806], [66.57945466690859], [-40191.05282807624], [-1501.1170230452076], [-76.82226326626915], [-6053.130993127477], [18303.675418446255], [-11230.397060672502], [-14579.167136944252], [-15571.784861780587], [-9845.378234545922], [-56521.506247837715], [-2225.265113871239], [2644.211972989586], [10486.142882948603], [-8717.355024398574], [54245.27068218786], [-15922.291732433514], [-3667.1766660240482], [-380.4727705532953]]

        self.__hidden_layer = []
        self.__hidden_layer_predict = []
        self.__center_num=center_num
        self.neighboring_center_num=neighboring_center_num
        self.__centers=[[0.0, 1.0, 1.0, 18.0], [0.0, 3.0, 6.0, 170.0], [0.0, 2.0, 3.0, 293.0], [0.0, 1.0, 4.0, 122.0], [0.0, 1.0, 7.0, 202.0], [0.0, 3.0, 3.0, 42.0], [0.0, 1.0, 1.0, 23.0], [0.0, 2.0, 4.0, 120.0], [0.0, 2.0, 1.0, 251.0], [0.0, 1.0, 3.0, 80.0], [0.0, 2.0, 1.0, 262.0], [0.0, 2.0, 1.0, 22.0], [0.0, 1.0, 4.0, 95.0], [0.0, 3.0, 5.0, 178.0], [0.0, 2.0, 1.0, 304.0], [0.0, 2.0, 5.0, 142.0], [0.0, 3.0, 3.0, 323.0], [0.0, 2.0, 5.0, 130.0], [0.0, 2.0, 2.0, 333.0], [0.0, 1.0, 6.0, 154.0], [0.0, 1.0, 3.0, 77.0], [0.0, 2.0, 4.0, 6.0], [0.0, 3.0, 7.0, 228.0], [0.0, 2.0, 6.0, 344.0], [0.0, 2.0, 6.0, 162.0], [0.0, 2.0, 7.0, 346.0], [0.0, 2.0, 1.0, 342.0], [0.0, 1.0, 6.0, 240.0], [0.0, 2.0, 7.0, 87.0], [0.0, 1.0, 7.0, 325.0], [0.0, 2.0, 2.0, 185.0], [0.0, 1.0, 2.0, 348.0], [0.0, 1.0, 3.0, 146.0], [0.0, 3.0, 6.0, 313.0], [0.0, 1.0, 7.0, 3.0], [0.0, 3.0, 7.0, 51.0], [0.0, 1.0, 3.0, 137.0], [0.0, 1.0, 6.0, 11.0], [0.0, 2.0, 2.0, 358.0], [0.0, 3.0, 1.0, 97.0], [0.0, 1.0, 4.0, 243.0], [0.0, 1.0, 2.0, 93.0], [0.0, 3.0, 4.0, 264.0], [0.0, 1.0, 4.0, 238.0], [0.0, 2.0, 7.0, 233.0], [0.0, 1.0, 7.0, 73.0], [0.0, 1.0, 4.0, 323.0], [0.0, 1.0, 2.0, 226.0], [0.0, 2.0, 3.0, 270.0], [0.0, 3.0, 3.0, 365.0], [1.0, 2.0, 3.0, 141.0], [1.0, 2.0, 3.0, 218.0], [1.0, 2.0, 7.0, 249.0], [1.0, 1.0, 1.0, 19.0], [1.0, 2.0, 3.0, 21.0], [1.0, 1.0, 6.0, 235.0], [1.0, 3.0, 6.0, 294.0], [1.0, 2.0, 5.0, 218.0], [1.0, 1.0, 3.0, 83.0], [1.0, 2.0, 7.0, 284.0], [1.0, 3.0, 3.0, 300.0], [1.0, 1.0, 3.0, 186.0], [1.0, 2.0, 4.0, 74.0], [1.0, 3.0, 2.0, 345.0], [1.0, 3.0, 7.0, 193.0], [1.0, 3.0, 5.0, 291.0], [1.0, 3.0, 5.0, 153.0], [1.0, 2.0, 7.0, 334.0], [1.0, 1.0, 7.0, 93.0], [1.0, 3.0, 2.0, 199.0], [1.0, 2.0, 5.0, 260.0], [1.0, 1.0, 4.0, 51.0], [1.0, 3.0, 5.0, 255.0], [1.0, 1.0, 5.0, 124.0], [1.0, 1.0, 1.0, 313.0], [1.0, 3.0, 1.0, 251.0], [1.0, 2.0, 1.0, 12.0], [1.0, 2.0, 3.0, 283.0], [1.0, 1.0, 1.0, 72.0], [1.0, 3.0, 2.0, 111.0], [1.0, 1.0, 1.0, 358.0], [1.0, 1.0, 4.0, 214.0], [1.0, 2.0, 7.0, 83.0], [1.0, 1.0, 5.0, 53.0], [1.0, 1.0, 4.0, 62.0], [1.0, 1.0, 6.0, 22.0], [1.0, 2.0, 3.0, 64.0], [1.0, 1.0, 1.0, 18.0], [1.0, 2.0, 4.0, 225.0], [1.0, 3.0, 3.0, 90.0], [1.0, 3.0, 6.0, 366.0], [1.0, 2.0, 3.0, 97.0], [1.0, 3.0, 7.0, 222.0], [1.0, 1.0, 3.0, 68.0], [1.0, 2.0, 2.0, 40.0], [1.0, 1.0, 6.0, 185.0], [1.0, 3.0, 2.0, 179.0], [1.0, 1.0, 7.0, 51.0], [1.0, 3.0, 6.0, 93.0], [1.0, 2.0, 6.0, 208.0], [2.0, 2.0, 1.0, 352.0], [2.0, 3.0, 7.0, 253.0], [2.0, 1.0, 2.0, 167.0], [2.0, 1.0, 4.0, 266.0], [2.0, 2.0, 7.0, 279.0], [2.0, 3.0, 6.0, 280.0], [2.0, 3.0, 6.0, 139.0], [2.0, 2.0, 2.0, 181.0], [2.0, 3.0, 1.0, 234.0], [2.0, 3.0, 6.0, 234.0], [2.0, 3.0, 5.0, 140.0], [2.0, 2.0, 5.0, 67.0], [2.0, 2.0, 1.0, 127.0], [2.0, 3.0, 2.0, 38.0], [2.0, 3.0, 4.0, 26.0], [2.0, 2.0, 1.0, 93.0], [2.0, 2.0, 5.0, 56.0], [2.0, 3.0, 3.0, 89.0], [2.0, 2.0, 4.0, 152.0], [2.0, 3.0, 6.0, 116.0], [2.0, 2.0, 5.0, 224.0], [2.0, 1.0, 7.0, 255.0], [2.0, 2.0, 7.0, 191.0], [2.0, 2.0, 7.0, 147.0], [2.0, 1.0, 5.0, 366.0], [2.0, 3.0, 3.0, 182.0], [2.0, 2.0, 4.0, 229.0], [2.0, 2.0, 4.0, 284.0], [2.0, 3.0, 3.0, 74.0], [2.0, 3.0, 4.0, 309.0], [2.0, 2.0, 3.0, 304.0], [2.0, 2.0, 4.0, 142.0], [2.0, 1.0, 7.0, 44.0], [2.0, 3.0, 6.0, 43.0], [2.0, 2.0, 4.0, 353.0], [2.5, 2.5, 4.5, 133.5], [2.0, 2.0, 7.0, 355.0], [2.0, 1.0, 4.0, 197.0], [2.0, 3.0, 2.0, 11.0], [2.0, 1.0, 6.0, 313.0], [2.0, 1.0, 4.0, 208.0], [2.0, 3.0, 4.0, 210.0], [2.0, 2.0, 2.0, 357.0], [2.0, 3.0, 7.0, 323.0], [2.0, 2.0, 7.0, 331.0], [2.0, 2.0, 4.0, 252.0], [2.0, 2.0, 1.0, 168.0], [2.0, 1.0, 7.0, 364.0], [2.0, 2.0, 7.0, 5.0], [2.0, 3.0, 5.0, 269.0], [3.0, 3.0, 1.0, 285.0], [3.0, 3.0, 6.0, 273.0], [3.0, 2.0, 2.0, 347.0], [3.0, 2.0, 3.0, 123.0], [3.0, 2.0, 7.0, 223.0], [3.0, 2.0, 3.0, 113.0], [3.0, 1.0, 1.0, 355.0], [3.0, 3.0, 4.0, 96.0], [3.0, 2.0, 2.5, 241.5], [3.0, 2.0, 7.0, 74.0], [3.0, 3.0, 1.0, 26.0], [3.0, 3.0, 3.0, 218.0], [3.0, 3.0, 2.5, 236.5], [3.0, 1.0, 4.0, 91.0], [3.0, 1.0, 3.0, 203.0], [3.0, 2.0, 5.0, 172.0], [3.0, 2.0, 3.0, 149.0], [3.0, 1.0, 4.0, 352.0], [3.0, 2.0, 4.0, 49.0], [3.0, 1.0, 3.0, 31.0], [3.0, 1.0, 1.0, 152.0], [3.0, 3.0, 3.0, 122.0], [3.0, 1.5, 3.0, 246.0], [3.0, 2.0, 2.0, 312.0], [3.0, 2.0, 7.0, 82.0], [3.0, 2.0, 5.0, 101.0], [3.0, 1.0, 1.0, 113.0], [3.0, 1.0, 3.0, 348.0], [3.0, 1.0, 1.0, 318.0], [3.0, 3.0, 4.0, 298.0], [3.0, 2.5, 4.0, 27.5], [3.0, 3.0, 7.0, 90.0], [3.0, 1.0, 3.0, 270.0], [3.0, 3.0, 5.0, 238.0], [3.0, 2.0, 3.0, 72.0], [3.0, 3.0, 7.0, 284.0], [3.0, 2.0, 5.0, 258.0], [3.0, 3.0, 3.0, 261.0], [3.0, 1.0, 1.0, 300.0], [3.0, 1.0, 3.0, 44.0], [3.0, 3.0, 2.0, 160.0], [3.0, 2.0, 4.0, 263.0], [3.0, 3.0, 2.0, 95.0], [3.0, 1.0, 7.0, 357.0], [3.0, 3.0, 6.0, 357.0]]
        self.__clusters=[[[0, 1, 1, 18]], [[0, 3, 6, 170]], [[0, 2, 3, 293]], [[0, 1, 4, 122]], [[0, 1, 7, 202]], [[0, 3, 3, 42]], [[0, 1, 1, 23]], [[0, 2, 4, 120]], [[0, 2, 1, 251]], [[0, 1, 3, 80]], [[0, 2, 1, 262]], [[0, 2, 1, 22]], [[0, 1, 4, 95]], [[0, 3, 5, 178]], [[0, 2, 1, 304]], [[0, 2, 5, 142]], [[0, 3, 3, 323]], [[0, 2, 5, 130]], [[0, 2, 2, 333]], [[0, 1, 6, 154]], [[0, 1, 3, 77]], [[0, 2, 4, 6]], [[0, 3, 7, 228]], [[0, 2, 6, 344]], [[0, 2, 6, 162]], [[0, 2, 7, 346]], [[0, 2, 1, 342]], [[0, 1, 6, 240]], [[0, 2, 7, 87]], [[0, 1, 7, 325]], [[0, 2, 2, 185]], [[0, 1, 2, 348]], [[0, 1, 3, 146]], [[0, 3, 6, 313]], [[0, 1, 7, 3]], [[0, 3, 7, 51]], [[0, 1, 3, 137]], [[0, 1, 6, 11]], [[0, 2, 2, 358]], [[0, 3, 1, 97]], [[0, 1, 4, 243]], [[0, 1, 2, 93]], [[0, 3, 4, 264]], [[0, 1, 4, 238]], [[0, 2, 7, 233]], [[0, 1, 7, 73]], [[0, 1, 4, 323]], [[0, 1, 2, 226]], [[0, 2, 3, 270]], [[0, 3, 3, 365]], [[1, 2, 3, 141]], [[1, 2, 3, 218]], [[1, 2, 7, 249]], [[1, 1, 1, 19]], [[1, 2, 3, 21]], [[1, 1, 6, 235]], [[1, 3, 6, 294]], [[1, 2, 5, 218]], [[1, 1, 3, 83]], [[1, 2, 7, 284]], [[1, 3, 3, 300]], [[1, 1, 3, 186]], [[1, 2, 4, 74]], [[1, 3, 2, 345]], [[1, 3, 7, 193]], [[1, 3, 5, 291]], [[1, 3, 5, 153]], [[1, 2, 7, 334]], [[1, 1, 7, 93]], [[1, 3, 2, 199]], [[1, 2, 5, 260]], [[1, 1, 4, 51]], [[1, 3, 5, 255]], [[1, 1, 5, 124]], [[1, 1, 1, 313]], [[1, 3, 1, 251]], [[1, 2, 1, 12]], [[1, 2, 3, 283]], [[1, 1, 1, 72]], [[1, 3, 2, 111]], [[1, 1, 1, 358]], [[1, 1, 4, 214]], [[1, 2, 7, 83]], [[1, 1, 5, 53]], [[1, 1, 4, 62]], [[1, 1, 6, 22]], [[1, 2, 3, 64]], [[1, 1, 1, 18]], [[1, 2, 4, 225]], [[1, 3, 3, 90]], [[1, 3, 6, 366]], [[1, 2, 3, 97]], [[1, 3, 7, 222]], [[1, 1, 3, 68]], [[1, 2, 2, 40]], [[1, 1, 6, 185]], [[1, 3, 2, 179]], [[1, 1, 7, 51]], [[1, 3, 6, 93]], [[1, 2, 6, 208]], [[2, 2, 1, 352]], [[2, 3, 7, 253]], [[2, 1, 2, 167]], [[2, 1, 4, 266]], [[2, 2, 7, 279]], [[2, 3, 6, 280]], [[2, 3, 6, 139]], [[2, 2, 2, 181]], [[2, 3, 1, 234]], [[2, 3, 6, 234]], [[2, 3, 5, 140]], [[2, 2, 5, 67]], [[2, 2, 1, 127]], [[2, 3, 2, 38]], [[2, 3, 4, 26]], [[2, 2, 1, 93]], [[2, 2, 5, 56]], [[2, 3, 3, 89]], [[2, 2, 4, 152]], [[2, 3, 6, 116]], [[2, 2, 5, 224]], [[2, 1, 7, 255]], [[2, 2, 7, 191]], [[2, 2, 7, 147]], [[2, 1, 5, 366]], [[2, 3, 3, 182]], [[2, 2, 4, 229]], [[2, 2, 4, 284]], [[2, 3, 3, 74]], [[2, 3, 4, 309]], [[2, 2, 3, 304]], [[2, 2, 4, 142]], [[2, 1, 7, 44]], [[2, 3, 6, 43]], [[2, 2, 4, 353]], [[2, 3, 3, 133], [3, 2, 6, 134]], [[2, 2, 7, 355]], [[2, 1, 4, 197]], [[2, 3, 2, 11]], [[2, 1, 6, 313]], [[2, 1, 4, 208]], [[2, 3, 4, 210]], [[2, 2, 2, 357]], [[2, 3, 7, 323]], [[2, 2, 7, 331]], [[2, 2, 4, 252]], [[2, 2, 1, 168]], [[2, 1, 7, 364]], [[2, 2, 7, 5]], [[2, 3, 5, 269]], [[3, 3, 1, 285]], [[3, 3, 6, 273]], [[3, 2, 2, 347]], [[3, 2, 3, 123]], [[3, 2, 7, 223]], [[3, 2, 3, 113]], [[3, 1, 1, 355]], [[3, 3, 4, 96]], [[3, 2, 4, 241], [3, 2, 1, 242]], [[3, 2, 7, 74]], [[3, 3, 1, 26]], [[3, 3, 3, 218]], [[3, 3, 2, 237], [3, 3, 3, 236]], [[3, 1, 4, 91]], [[3, 1, 3, 203]], [[3, 2, 5, 172]], [[3, 2, 3, 149]], [[3, 1, 4, 352]], [[3, 2, 4, 49]], [[3, 1, 3, 31]], [[3, 1, 1, 152]], [[3, 3, 3, 122]], [[3, 1, 5, 247], [3, 2, 1, 245]], [[3, 2, 2, 312]], [[3, 2, 7, 82]], [[3, 2, 5, 101]], [[3, 1, 1, 113]], [[3, 1, 3, 348]], [[3, 1, 1, 318]], [[3, 3, 4, 298]], [[3, 3, 4, 27], [3, 2, 4, 28]], [[3, 3, 7, 90]], [[3, 1, 3, 270]], [[3, 3, 5, 238]], [[3, 2, 3, 72]], [[3, 3, 7, 284]], [[3, 2, 5, 258]], [[3, 3, 3, 261]], [[3, 1, 1, 300]], [[3, 1, 3, 44]], [[3, 3, 2, 160]], [[3, 2, 4, 263]], [[3, 3, 2, 95]], [[3, 1, 7, 357]], [[3, 3, 6, 357]], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
        

#------------------------------------------------------------------------------
    """find all the clusters and center points and store them"""
    def find_centers(self,x):
        #use K-means to find centers and store it in nxk matrix
        #where n is number of input nodes and k is number of centers
        #k_means_object_1 = k_means_Centers.k_means_Centers(x, self.__center_num)
        #self.__centers,self.__clusters=k_means_object_1.solution()
        #print("centers")
        #print(self.__centers)
        #print("clusters")
        #print(self.__clusters)
        self.__centers=[[0.0, 1.0, 1.0, 18.0], [0.0, 3.0, 6.0, 170.0], [0.0, 2.0, 3.0, 293.0], [0.0, 1.0, 4.0, 122.0], [0.0, 1.0, 7.0, 202.0], [0.0, 3.0, 3.0, 42.0], [0.0, 1.0, 1.0, 23.0], [0.0, 2.0, 4.0, 120.0], [0.0, 2.0, 1.0, 251.0], [0.0, 1.0, 3.0, 80.0], [0.0, 2.0, 1.0, 262.0], [0.0, 2.0, 1.0, 22.0], [0.0, 1.0, 4.0, 95.0], [0.0, 3.0, 5.0, 178.0], [0.0, 2.0, 1.0, 304.0], [0.0, 2.0, 5.0, 142.0], [0.0, 3.0, 3.0, 323.0], [0.0, 2.0, 5.0, 130.0], [0.0, 2.0, 2.0, 333.0], [0.0, 1.0, 6.0, 154.0], [0.0, 1.0, 3.0, 77.0], [0.0, 2.0, 4.0, 6.0], [0.0, 3.0, 7.0, 228.0], [0.0, 2.0, 6.0, 344.0], [0.0, 2.0, 6.0, 162.0], [0.0, 2.0, 7.0, 346.0], [0.0, 2.0, 1.0, 342.0], [0.0, 1.0, 6.0, 240.0], [0.0, 2.0, 7.0, 87.0], [0.0, 1.0, 7.0, 325.0], [0.0, 2.0, 2.0, 185.0], [0.0, 1.0, 2.0, 348.0], [0.0, 1.0, 3.0, 146.0], [0.0, 3.0, 6.0, 313.0], [0.0, 1.0, 7.0, 3.0], [0.0, 3.0, 7.0, 51.0], [0.0, 1.0, 3.0, 137.0], [0.0, 1.0, 6.0, 11.0], [0.0, 2.0, 2.0, 358.0], [0.0, 3.0, 1.0, 97.0], [0.0, 1.0, 4.0, 243.0], [0.0, 1.0, 2.0, 93.0], [0.0, 3.0, 4.0, 264.0], [0.0, 1.0, 4.0, 238.0], [0.0, 2.0, 7.0, 233.0], [0.0, 1.0, 7.0, 73.0], [0.0, 1.0, 4.0, 323.0], [0.0, 1.0, 2.0, 226.0], [0.0, 2.0, 3.0, 270.0], [0.0, 3.0, 3.0, 365.0], [1.0, 2.0, 3.0, 141.0], [1.0, 2.0, 3.0, 218.0], [1.0, 2.0, 7.0, 249.0], [1.0, 1.0, 1.0, 19.0], [1.0, 2.0, 3.0, 21.0], [1.0, 1.0, 6.0, 235.0], [1.0, 3.0, 6.0, 294.0], [1.0, 2.0, 5.0, 218.0], [1.0, 1.0, 3.0, 83.0], [1.0, 2.0, 7.0, 284.0], [1.0, 3.0, 3.0, 300.0], [1.0, 1.0, 3.0, 186.0], [1.0, 2.0, 4.0, 74.0], [1.0, 3.0, 2.0, 345.0], [1.0, 3.0, 7.0, 193.0], [1.0, 3.0, 5.0, 291.0], [1.0, 3.0, 5.0, 153.0], [1.0, 2.0, 7.0, 334.0], [1.0, 1.0, 7.0, 93.0], [1.0, 3.0, 2.0, 199.0], [1.0, 2.0, 5.0, 260.0], [1.0, 1.0, 4.0, 51.0], [1.0, 3.0, 5.0, 255.0], [1.0, 1.0, 5.0, 124.0], [1.0, 1.0, 1.0, 313.0], [1.0, 3.0, 1.0, 251.0], [1.0, 2.0, 1.0, 12.0], [1.0, 2.0, 3.0, 283.0], [1.0, 1.0, 1.0, 72.0], [1.0, 3.0, 2.0, 111.0], [1.0, 1.0, 1.0, 358.0], [1.0, 1.0, 4.0, 214.0], [1.0, 2.0, 7.0, 83.0], [1.0, 1.0, 5.0, 53.0], [1.0, 1.0, 4.0, 62.0], [1.0, 1.0, 6.0, 22.0], [1.0, 2.0, 3.0, 64.0], [1.0, 1.0, 1.0, 18.0], [1.0, 2.0, 4.0, 225.0], [1.0, 3.0, 3.0, 90.0], [1.0, 3.0, 6.0, 366.0], [1.0, 2.0, 3.0, 97.0], [1.0, 3.0, 7.0, 222.0], [1.0, 1.0, 3.0, 68.0], [1.0, 2.0, 2.0, 40.0], [1.0, 1.0, 6.0, 185.0], [1.0, 3.0, 2.0, 179.0], [1.0, 1.0, 7.0, 51.0], [1.0, 3.0, 6.0, 93.0], [1.0, 2.0, 6.0, 208.0], [2.0, 2.0, 1.0, 352.0], [2.0, 3.0, 7.0, 253.0], [2.0, 1.0, 2.0, 167.0], [2.0, 1.0, 4.0, 266.0], [2.0, 2.0, 7.0, 279.0], [2.0, 3.0, 6.0, 280.0], [2.0, 3.0, 6.0, 139.0], [2.0, 2.0, 2.0, 181.0], [2.0, 3.0, 1.0, 234.0], [2.0, 3.0, 6.0, 234.0], [2.0, 3.0, 5.0, 140.0], [2.0, 2.0, 5.0, 67.0], [2.0, 2.0, 1.0, 127.0], [2.0, 3.0, 2.0, 38.0], [2.0, 3.0, 4.0, 26.0], [2.0, 2.0, 1.0, 93.0], [2.0, 2.0, 5.0, 56.0], [2.0, 3.0, 3.0, 89.0], [2.0, 2.0, 4.0, 152.0], [2.0, 3.0, 6.0, 116.0], [2.0, 2.0, 5.0, 224.0], [2.0, 1.0, 7.0, 255.0], [2.0, 2.0, 7.0, 191.0], [2.0, 2.0, 7.0, 147.0], [2.0, 1.0, 5.0, 366.0], [2.0, 3.0, 3.0, 182.0], [2.0, 2.0, 4.0, 229.0], [2.0, 2.0, 4.0, 284.0], [2.0, 3.0, 3.0, 74.0], [2.0, 3.0, 4.0, 309.0], [2.0, 2.0, 3.0, 304.0], [2.0, 2.0, 4.0, 142.0], [2.0, 1.0, 7.0, 44.0], [2.0, 3.0, 6.0, 43.0], [2.0, 2.0, 4.0, 353.0], [2.5, 2.5, 4.5, 133.5], [2.0, 2.0, 7.0, 355.0], [2.0, 1.0, 4.0, 197.0], [2.0, 3.0, 2.0, 11.0], [2.0, 1.0, 6.0, 313.0], [2.0, 1.0, 4.0, 208.0], [2.0, 3.0, 4.0, 210.0], [2.0, 2.0, 2.0, 357.0], [2.0, 3.0, 7.0, 323.0], [2.0, 2.0, 7.0, 331.0], [2.0, 2.0, 4.0, 252.0], [2.0, 2.0, 1.0, 168.0], [2.0, 1.0, 7.0, 364.0], [2.0, 2.0, 7.0, 5.0], [2.0, 3.0, 5.0, 269.0], [3.0, 3.0, 1.0, 285.0], [3.0, 3.0, 6.0, 273.0], [3.0, 2.0, 2.0, 347.0], [3.0, 2.0, 3.0, 123.0], [3.0, 2.0, 7.0, 223.0], [3.0, 2.0, 3.0, 113.0], [3.0, 1.0, 1.0, 355.0], [3.0, 3.0, 4.0, 96.0], [3.0, 2.0, 2.5, 241.5], [3.0, 2.0, 7.0, 74.0], [3.0, 3.0, 1.0, 26.0], [3.0, 3.0, 3.0, 218.0], [3.0, 3.0, 2.5, 236.5], [3.0, 1.0, 4.0, 91.0], [3.0, 1.0, 3.0, 203.0], [3.0, 2.0, 5.0, 172.0], [3.0, 2.0, 3.0, 149.0], [3.0, 1.0, 4.0, 352.0], [3.0, 2.0, 4.0, 49.0], [3.0, 1.0, 3.0, 31.0], [3.0, 1.0, 1.0, 152.0], [3.0, 3.0, 3.0, 122.0], [3.0, 1.5, 3.0, 246.0], [3.0, 2.0, 2.0, 312.0], [3.0, 2.0, 7.0, 82.0], [3.0, 2.0, 5.0, 101.0], [3.0, 1.0, 1.0, 113.0], [3.0, 1.0, 3.0, 348.0], [3.0, 1.0, 1.0, 318.0], [3.0, 3.0, 4.0, 298.0], [3.0, 2.5, 4.0, 27.5], [3.0, 3.0, 7.0, 90.0], [3.0, 1.0, 3.0, 270.0], [3.0, 3.0, 5.0, 238.0], [3.0, 2.0, 3.0, 72.0], [3.0, 3.0, 7.0, 284.0], [3.0, 2.0, 5.0, 258.0], [3.0, 3.0, 3.0, 261.0], [3.0, 1.0, 1.0, 300.0], [3.0, 1.0, 3.0, 44.0], [3.0, 3.0, 2.0, 160.0], [3.0, 2.0, 4.0, 263.0], [3.0, 3.0, 2.0, 95.0], [3.0, 1.0, 7.0, 357.0], [3.0, 3.0, 6.0, 357.0]]
        self.__clusters=[[[0, 1, 1, 18]], [[0, 3, 6, 170]], [[0, 2, 3, 293]], [[0, 1, 4, 122]], [[0, 1, 7, 202]], [[0, 3, 3, 42]], [[0, 1, 1, 23]], [[0, 2, 4, 120]], [[0, 2, 1, 251]], [[0, 1, 3, 80]], [[0, 2, 1, 262]], [[0, 2, 1, 22]], [[0, 1, 4, 95]], [[0, 3, 5, 178]], [[0, 2, 1, 304]], [[0, 2, 5, 142]], [[0, 3, 3, 323]], [[0, 2, 5, 130]], [[0, 2, 2, 333]], [[0, 1, 6, 154]], [[0, 1, 3, 77]], [[0, 2, 4, 6]], [[0, 3, 7, 228]], [[0, 2, 6, 344]], [[0, 2, 6, 162]], [[0, 2, 7, 346]], [[0, 2, 1, 342]], [[0, 1, 6, 240]], [[0, 2, 7, 87]], [[0, 1, 7, 325]], [[0, 2, 2, 185]], [[0, 1, 2, 348]], [[0, 1, 3, 146]], [[0, 3, 6, 313]], [[0, 1, 7, 3]], [[0, 3, 7, 51]], [[0, 1, 3, 137]], [[0, 1, 6, 11]], [[0, 2, 2, 358]], [[0, 3, 1, 97]], [[0, 1, 4, 243]], [[0, 1, 2, 93]], [[0, 3, 4, 264]], [[0, 1, 4, 238]], [[0, 2, 7, 233]], [[0, 1, 7, 73]], [[0, 1, 4, 323]], [[0, 1, 2, 226]], [[0, 2, 3, 270]], [[0, 3, 3, 365]], [[1, 2, 3, 141]], [[1, 2, 3, 218]], [[1, 2, 7, 249]], [[1, 1, 1, 19]], [[1, 2, 3, 21]], [[1, 1, 6, 235]], [[1, 3, 6, 294]], [[1, 2, 5, 218]], [[1, 1, 3, 83]], [[1, 2, 7, 284]], [[1, 3, 3, 300]], [[1, 1, 3, 186]], [[1, 2, 4, 74]], [[1, 3, 2, 345]], [[1, 3, 7, 193]], [[1, 3, 5, 291]], [[1, 3, 5, 153]], [[1, 2, 7, 334]], [[1, 1, 7, 93]], [[1, 3, 2, 199]], [[1, 2, 5, 260]], [[1, 1, 4, 51]], [[1, 3, 5, 255]], [[1, 1, 5, 124]], [[1, 1, 1, 313]], [[1, 3, 1, 251]], [[1, 2, 1, 12]], [[1, 2, 3, 283]], [[1, 1, 1, 72]], [[1, 3, 2, 111]], [[1, 1, 1, 358]], [[1, 1, 4, 214]], [[1, 2, 7, 83]], [[1, 1, 5, 53]], [[1, 1, 4, 62]], [[1, 1, 6, 22]], [[1, 2, 3, 64]], [[1, 1, 1, 18]], [[1, 2, 4, 225]], [[1, 3, 3, 90]], [[1, 3, 6, 366]], [[1, 2, 3, 97]], [[1, 3, 7, 222]], [[1, 1, 3, 68]], [[1, 2, 2, 40]], [[1, 1, 6, 185]], [[1, 3, 2, 179]], [[1, 1, 7, 51]], [[1, 3, 6, 93]], [[1, 2, 6, 208]], [[2, 2, 1, 352]], [[2, 3, 7, 253]], [[2, 1, 2, 167]], [[2, 1, 4, 266]], [[2, 2, 7, 279]], [[2, 3, 6, 280]], [[2, 3, 6, 139]], [[2, 2, 2, 181]], [[2, 3, 1, 234]], [[2, 3, 6, 234]], [[2, 3, 5, 140]], [[2, 2, 5, 67]], [[2, 2, 1, 127]], [[2, 3, 2, 38]], [[2, 3, 4, 26]], [[2, 2, 1, 93]], [[2, 2, 5, 56]], [[2, 3, 3, 89]], [[2, 2, 4, 152]], [[2, 3, 6, 116]], [[2, 2, 5, 224]], [[2, 1, 7, 255]], [[2, 2, 7, 191]], [[2, 2, 7, 147]], [[2, 1, 5, 366]], [[2, 3, 3, 182]], [[2, 2, 4, 229]], [[2, 2, 4, 284]], [[2, 3, 3, 74]], [[2, 3, 4, 309]], [[2, 2, 3, 304]], [[2, 2, 4, 142]], [[2, 1, 7, 44]], [[2, 3, 6, 43]], [[2, 2, 4, 353]], [[2, 3, 3, 133], [3, 2, 6, 134]], [[2, 2, 7, 355]], [[2, 1, 4, 197]], [[2, 3, 2, 11]], [[2, 1, 6, 313]], [[2, 1, 4, 208]], [[2, 3, 4, 210]], [[2, 2, 2, 357]], [[2, 3, 7, 323]], [[2, 2, 7, 331]], [[2, 2, 4, 252]], [[2, 2, 1, 168]], [[2, 1, 7, 364]], [[2, 2, 7, 5]], [[2, 3, 5, 269]], [[3, 3, 1, 285]], [[3, 3, 6, 273]], [[3, 2, 2, 347]], [[3, 2, 3, 123]], [[3, 2, 7, 223]], [[3, 2, 3, 113]], [[3, 1, 1, 355]], [[3, 3, 4, 96]], [[3, 2, 4, 241], [3, 2, 1, 242]], [[3, 2, 7, 74]], [[3, 3, 1, 26]], [[3, 3, 3, 218]], [[3, 3, 2, 237], [3, 3, 3, 236]], [[3, 1, 4, 91]], [[3, 1, 3, 203]], [[3, 2, 5, 172]], [[3, 2, 3, 149]], [[3, 1, 4, 352]], [[3, 2, 4, 49]], [[3, 1, 3, 31]], [[3, 1, 1, 152]], [[3, 3, 3, 122]], [[3, 1, 5, 247], [3, 2, 1, 245]], [[3, 2, 2, 312]], [[3, 2, 7, 82]], [[3, 2, 5, 101]], [[3, 1, 1, 113]], [[3, 1, 3, 348]], [[3, 1, 1, 318]], [[3, 3, 4, 298]], [[3, 3, 4, 27], [3, 2, 4, 28]], [[3, 3, 7, 90]], [[3, 1, 3, 270]], [[3, 3, 5, 238]], [[3, 2, 3, 72]], [[3, 3, 7, 284]], [[3, 2, 5, 258]], [[3, 3, 3, 261]], [[3, 1, 1, 300]], [[3, 1, 3, 44]], [[3, 3, 2, 160]], [[3, 2, 4, 263]], [[3, 3, 2, 95]], [[3, 1, 7, 357]], [[3, 3, 6, 357]], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
        
        
#------------------------------------------------------------------------------
    """given an input return the corresponding center"""
    def find_c(self,x):
        for i in range(len(self.__centers)):
            for j in range(len(self.__clusters[i])):
                if (self.__clusters[i][j]==x):
                    return self.__centers[i]

#------------------------------------------------------------------------------        
    def center_exist(self,x):
        i=False
        for i in range(len(self.__centers)):
            for j in range(len(self.__clusters[i])):
                if (self.__clusters[i][j]==x):
                    i=True
                    break
        return i
                
#------------------------------------------------------------------------------
    def find_closest_c(self,x):
        a=[]
        b=[]
        
        #calculate distance between input to all centers
        for i in range(len(self.__centers)):
            a.append(np.sum( ( np.asarray(x) - np.asarray(self.__centers[i]) )**2 ) )
        a.sort()
        return a[0]
    
#------------------------------------------------------------------------------    
    """find r which is root mean square distance between current cluster
       center and k number of neighboring cluster centers."""
    def find_r(self,c):
        a=[]
        #calculate distance between current center to all centers
        for i in range(len(self.__centers)):
            a.append(np.sum( ( np.asarray(c) - np.asarray(self.__centers[i]) )**2 ) )
        a.sort()
        b=[]
        for j in range(self.neighboring_center_num):
            b.append(a[j+1]) #a[0] is distance of current center to itself so start with a[1]
        r=math.sqrt((sum(b)**2)/self.neighboring_center_num)
        
        a.clear()
        b.clear()
        return r
            

#------------------------------------------------------------------------------ 
    """radial basis function
     x is one input
     c is the center for that input
     x and c are vectors"""
    def RBF(self,x,c):
        a= np.sum( (np.asarray(x) - np.asarray(c)) **2)
        c_current=self.find_c(x)
        b=self.find_r(c_current)
        return (math.exp(-1 * a /( b**2 ) ))

    def RBF_predict(self,x,c):
        a= np.sum( (np.asarray(x) - np.asarray(c)) **2)
        c_current=self.find_closest_c(x)
        b=self.find_r(c_current)
        return (math.exp(-1 * a /( b**2 ) ))
       
        
#------------------------------------------------------------------------------
    def calculate_hidden_layer(self,in1):
        # N by K matrix
        # N is number of inputs and k is number of centers (# of hidden layer)
        temp_hidden=[]
        self.__hidden_layer.clear()
        for i in range(len(in1)):
            for j in range(len(self.__centers)):
            # c is center for the input
                a=self.RBF(in1[i],self.__centers[j])
                temp_hidden.append(a)
            self.__hidden_layer.append([n for n in temp_hidden])
            temp_hidden.clear()
#------------------------------------------------------------------------------

    def calculate_hidden_layer_predict(self,in1):
        # N by K matrix
        # N is number of inputs and k is number of centers (# of hidden layer)
        temp_hidden=[]
        self.__hidden_layer_predict.clear()
        for i in range(len(in1)):
            for j in range(len(self.__centers)):
            # c is center for the input
                a=self.RBF_predict(in1[i],self.__centers[j])
                temp_hidden.append(a)
            self.__hidden_layer_predict.append([n for n in temp_hidden])
            temp_hidden.clear()
#------------------------------------------------------------------------------
            
    def predict(self, inputs):
        self.calculate_hidden_layer_predict(inputs)
        H=np.asarray(self.__hidden_layer_predict)
        W_np=np.asarray(self.__weights_hidden_to_output)
        y=np.dot(H,W_np)
        round_output=np.rint(y)

        self.__predicted_output=round_output.tolist()
        #self.__predicted_output=[n if n>1 else 1 for n in self.__predicted_output]
        for i in range (0, len(self.__predicted_output)):
            if (self.__predicted_output[i][0] < 1):
                self.__predicted_output[i][0] = 1

        return self.__predicted_output
        
#------------------------------------------------------------------------------

    """Calculates hidden to output wieghts using matrix operations"""
    def cal_wieghts(self):
        H_np=np.asarray(self.__hidden_layer)
        H_tanspose=np.transpose(H_np)
        Y=np.asarray(self.__train_outputs)
        mul=np.dot(H_tanspose,H_np)
        Inv=inv(mul)
        a=np.dot(Inv,H_tanspose)
        b=np.dot(a,Y)
        self.__weights_hidden_to_output=b.tolist()
        self.__weights_hidden_to_output=[[1.5280533406960686], [9326.27663583825], [2221.9010641975656], [3043.0695046494693], [-16355.207880290269], [3222.5693016344885], [-1258.0392602439315], [-2603.902244523677], [20521.152620803037], [-64974.45499619513], [-42.047371266375194], [1426.3691555762389], [38908.51570501755], [-94909.6198670708], [2537.4451481507167], [-45658.95776194632], [6033.527238315471], [2911.4088571151033], [2051.6219895198624], [-47120.859225698274], [47242.1374597314], [-456.1314459637667], [-21818.61778909669], [16202.040701234695], [13743.901299872578], [-6514.8824915910445], [3906.301256348029], [34678.466712981826], [-5725.101586547389], [8819.212852006069], [21302.317948304826], [2556.3527792158334], [39104.66342463096], [-24335.269023801608], [-50.481411009925296], [-5006.338511389644], [-10940.953996542814], [232.0207924192935], [-2440.283402419025], [672.967946958581], [-23742.60600004993], [-41078.17692694321], [-16368.364559133288], [10690.674061955404], [38360.958910392335], [-1154.0131171363983], [-12100.007180759772], [24576.898900764834], [17013.290672334064], [3741.5886478698285], [24683.904183954488], [-519.3327724796727], [-32013.14314327595], [125.44691963355638], [-1180.7294467636038], [-56446.0976710222], [6252.009097382931], [-11255.389244162101], [45399.4524955284], [3018.8364723286177], [-907.6976100848988], [-54742.62880726749], [-35364.01646076492], [-23585.786009054835], [30402.47412094158], [-6886.574540085952], [736.5796412869386], [-1871.2313924172158], [691.9057266557757], [-14174.374356808166], [10364.98977139356], [29940.16912660848], [10171.598197810828], [-2177.2200782432155], [15166.534926368437], [-27553.691818773477], [585.234112179266], [-19121.804455589387], [-16417.970970379443], [2599.7697364578726], [7227.718068376473], [801.1146139980792], [12357.663345696412], [-44092.44803854151], [-8612.953726767642], [190.66223875661944], [-7507.593582642417], [-72.11106911536307], [-73246.25782672007], [52012.66755213037], [-2516.8029710704864], [-14723.518251729838], [30241.892207793608], [36699.04795058856], [-12356.457146546614], [90918.34095812969], [112200.6569841083], [16388.902165499967], [-27938.521827201497], [18865.068073978407], [-5978.671130238093], [26093.949512431853], [4020.4281422705562], [-15527.331538669467], [2859.640130804086], [-1514.3793866936667], [8227.459228508284], [-74204.40291565252], [-32665.8018358782], [-1361.1514296989335], [9733.19421811647], [-11231.442812510744], [1059.2032617131572], [3494.597631641458], [4418.554056052526], [31759.874964070783], [25624.375941316335], [-51397.77500342847], [67198.58595516982], [1310.8325937595273], [54946.01781375907], [6149.5539959188245], [-60129.0226339638], [27674.715628934107], [-5609.273517473035], [7254.469772746654], [26229.272200019375], [21791.369971960827], [29525.81727589867], [37727.288444012454], [-21282.027312113052], [-6494.617644446884], [-8411.370461512764], [6816.049845493613], [6227.1965139746535], [-1878.5669405279805], [-2609.350799798566], [22715.689510852048], [-471.5825587608547], [7746.12663107183], [-15711.279589312497], [-7116.994595692186], [-5188.017102536054], [7031.317758031204], [-8245.479906696717], [10179.717770129311], [-19898.589610536197], [6482.947205262153], [321.86327072737095], [-13853.726451954735], [2232.833138632232], [8098.08570678039], [42023.98289847997], [5001.471958123575], [-30172.226903177027], [-1396.7656967401294], [-3427.2752949724636], [18581.68362835097], [-19251.397682518822], [9585.208514848637], [103.57023757459683], [5179.852644738714], [48074.955100364874], [-13514.795986764162], [17901.538793365165], [18161.10126290075], [-90606.04059821417], [16074.595084639106], [-19822.20456933754], [2884.8700921537747], [20000.287726774455], [-5745.215403438144], [27156.156913349885], [-24673.519463077315], [-14413.4266485189], [-4373.99034289806], [66.57945466690859], [-40191.05282807624], [-1501.1170230452076], [-76.82226326626915], [-6053.130993127477], [18303.675418446255], [-11230.397060672502], [-14579.167136944252], [-15571.784861780587], [-9845.378234545922], [-56521.506247837715], [-2225.265113871239], [2644.211972989586], [10486.142882948603], [-8717.355024398574], [54245.27068218786], [-15922.291732433514], [-3667.1766660240482], [-380.4727705532953]]
        print(self.__weights_hidden_to_output)
        print("predicted output")
        round_num=np.rint(np.dot(H_np,b))
        round_num=round_num.tolist()
        #round_num=[n if n>1 else 1 for n in round_num]
        for i in range (0, len(round_num)):
            if (round_num[i][0] < 1):
                round_num[i][0] = 1
        print(round_num)
      
#------------------------------------------------------------------------------        

    def train(self):                      
        self.__train_inputs=[[0, 1, 1, 18], [0, 3, 6, 170], [0, 2, 3, 293], [0, 1, 4, 122], [0, 1, 7, 202], [0, 3, 3, 42], [0, 1, 1, 23], [0, 2, 4, 120], [0, 2, 1, 251], [0, 1, 3, 80], [0, 2, 1, 262], [0, 2, 1, 22], [0, 1, 4, 95], [0, 3, 5, 178], [0, 2, 1, 304], [0, 2, 5, 142], [0, 3, 3, 323], [0, 2, 5, 130], [0, 2, 2, 333], [0, 1, 6, 154], [0, 1, 3, 77], [0, 2, 4, 6], [0, 3, 7, 228], [0, 2, 6, 344], [0, 2, 6, 162], [0, 2, 7, 346], [0, 2, 1, 342], [0, 1, 6, 240], [0, 2, 7, 87], [0, 1, 7, 325], [0, 2, 2, 185], [0, 1, 2, 348], [0, 1, 3, 146], [0, 3, 6, 313], [0, 1, 7, 3], [0, 3, 7, 51], [0, 1, 3, 137], [0, 1, 6, 11], [0, 2, 2, 358], [0, 3, 1, 97], [0, 1, 4, 243], [0, 1, 2, 93], [0, 3, 4, 264], [0, 1, 4, 238], [0, 2, 7, 233], [0, 1, 7, 73], [0, 1, 4, 323], [0, 1, 2, 226], [0, 2, 3, 270], [0, 3, 3, 365], [1, 2, 3, 141], [1, 2, 3, 218], [1, 2, 7, 249], [1, 1, 1, 19], [1, 2, 3, 21], [1, 1, 6, 235], [1, 3, 6, 294], [1, 2, 5, 218], [1, 1, 3, 83], [1, 2, 7, 284], [1, 3, 3, 300], [1, 1, 3, 186], [1, 2, 4, 74], [1, 3, 2, 345], [1, 3, 7, 193], [1, 3, 5, 291], [1, 3, 5, 153], [1, 2, 7, 334], [1, 1, 7, 93], [1, 3, 2, 199], [1, 2, 5, 260], [1, 1, 4, 51], [1, 3, 5, 255], [1, 1, 5, 124], [1, 1, 1, 313], [1, 3, 1, 251], [1, 2, 1, 12], [1, 2, 3, 283], [1, 1, 1, 72], [1, 3, 2, 111], [1, 1, 1, 358], [1, 1, 4, 214], [1, 2, 7, 83], [1, 1, 5, 53], [1, 1, 4, 62], [1, 1, 6, 22], [1, 2, 3, 64], [1, 1, 1, 18], [1, 2, 4, 225], [1, 3, 3, 90], [1, 3, 6, 366], [1, 2, 3, 97], [1, 3, 7, 222], [1, 1, 3, 68], [1, 2, 2, 40], [1, 1, 6, 185], [1, 3, 2, 179], [1, 1, 7, 51], [1, 3, 6, 93], [1, 2, 6, 208], [2, 2, 1, 352], [2, 3, 7, 253], [2, 1, 2, 167], [2, 1, 4, 266], [2, 2, 7, 279], [2, 3, 6, 280], [2, 3, 6, 139], [2, 2, 2, 181], [2, 3, 1, 234], [2, 3, 6, 234], [2, 3, 5, 140], [2, 2, 5, 67], [2, 2, 1, 127], [2, 3, 2, 38], [2, 3, 4, 26], [2, 2, 1, 93], [2, 2, 5, 56], [2, 3, 3, 89], [2, 2, 4, 152], [2, 3, 6, 116], [2, 2, 5, 224], [2, 1, 7, 255], [2, 2, 7, 191], [2, 2, 7, 147], [2, 1, 5, 366], [2, 3, 3, 182], [2, 2, 4, 229], [2, 2, 4, 284], [2, 3, 3, 74], [2, 3, 4, 309], [2, 2, 3, 304], [2, 2, 4, 142], [2, 1, 7, 44], [2, 3, 6, 43], [2, 2, 4, 353], [2, 3, 3, 133], [2, 2, 7, 355], [2, 1, 4, 197], [2, 3, 2, 11], [2, 1, 6, 313], [2, 1, 4, 208], [2, 3, 4, 210], [2, 2, 2, 357], [2, 3, 7, 323], [2, 2, 7, 331], [2, 2, 4, 252], [2, 2, 1, 168], [2, 1, 7, 364], [2, 2, 7, 5], [2, 3, 5, 269], [3, 3, 1, 285], [3, 3, 6, 273], [3, 2, 2, 347], [3, 2, 3, 123], [3, 2, 7, 223], [3, 2, 3, 113], [3, 1, 1, 355], [3, 3, 4, 96], [3, 2, 4, 241], [3, 2, 7, 74], [3, 3, 4, 27], [3, 3, 3, 218], [3, 3, 2, 237], [3, 1, 4, 91], [3, 1, 3, 203], [3, 2, 5, 172], [3, 2, 3, 149], [3, 1, 4, 352], [3, 2, 4, 49], [3, 1, 3, 31], [3, 1, 1, 152], [3, 3, 3, 122], [3, 1, 5, 247], [3, 2, 2, 312], [3, 2, 7, 82], [3, 2, 5, 101], [3, 1, 1, 113], [3, 1, 3, 348], [3, 1, 1, 318], [3, 3, 4, 298], [3, 2, 4, 28], [3, 3, 7, 90], [3, 1, 3, 270], [3, 3, 5, 238], [3, 2, 3, 72], [3, 3, 7, 284], [3, 2, 5, 258], [3, 3, 3, 261], [3, 1, 1, 300], [3, 1, 3, 44], [3, 3, 2, 160], [3, 2, 4, 263], [3, 3, 2, 95], [3, 1, 7, 357], [3, 3, 6, 357], [3, 3, 1, 26], [3, 3, 3, 236], [3, 2, 1, 245], [3, 2, 1, 242], [3, 2, 6, 134]]
        self.__train_outputs=[[10.0], [5.0], [3.0], [1.0], [1.0], [6.0], [11.0], [2.0], [12.0], [2.0], [16.0], [10.0], [2.0], [6.0], [16.0], [2.0], [8.0], [3.0], [11.0], [1.0], [4.0], [3.0], [3.0], [2.0], [3.0], [2.0], [22.0], [1.0], [3.0], [1.0], [9.0], [4.0], [4.0], [4.0], [1.0], [3.0], [3.0], [1.0], [5.0], [30.0], [2.0], [4.0], [4.0], [1.0], [3.0], [1.0], [2.0], [2.0], [3.0], [11.0], [2.0], [2.0], [1.0], [4.0], [2.0], [0.0], [2.0], [1.0], [1.0], [1.0], [2.0], [1.0], [1.0], [4.0], [1.0], [2.0], [2.0], [1.0], [0.0], [6.0], [1.0], [1.0], [3.0], [1.0], [5.0], [12.0], [6.0], [1.0], [5.0], [4.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [4.0], [2.0], [2.0], [2.0], [2.0], [2.0], [2.0], [2.0], [1.0], [3.0], [1.0], [2.0], [2.0], [14.0], [4.0], [4.0], [2.0], [2.0], [4.0], [2.0], [11.0], [30.0], [4.0], [4.0], [2.0], [12.0], [8.0], [6.0], [16.0], [2.0], [5.0], [3.0], [4.0], [3.0], [2.0], [1.0], [2.0], [1.0], [6.0], [2.0], [6.0], [10.0], [8.0], [7.0], [6.0], [1.0], [5.0], [6.0], [7.0], [3.0], [2.0], [9.0], [1.0], [2.0], [8.0], [9.0], [4.0], [3.0], [4.0], [22.0], [1.0], [3.0], [3.0], [21.0], [5.0], [9.0], [5.0], [1.0], [5.0], [5.0], [4.0], [2.0], [2.0], [8.0], [8.0], [12.0], [1.0], [1.0], [2.0], [2.0], [1.0], [5.0], [1.0], [7.0], [3.0], [1.0], [11.0], [2.0], [2.0], [6.0], [3.0], [9.0], [8.0], [4.0], [4.0], [3.0], [3.0], [5.0], [3.0], [2.0], [9.0], [6.0], [3.0], [10.0], [4.0], [14.0], [1.0], [2.0], [24.0], [9.0], [22.0], [8.0], [2.0]]
        print("target output")
        print(self.__train_outputs)
        self.find_centers(self.__train_inputs)
        self.calculate_hidden_layer(self.__train_inputs)
        self.cal_wieghts()



#------------------------------------------------------------------------------    
        
if __name__ == "__main__":
    
    inputs=[[1,2,4,85]]
    rfn_instance = RBFN(inputs,195,2)
    #rfn_instance.train()
    rfn_instance.predict()
